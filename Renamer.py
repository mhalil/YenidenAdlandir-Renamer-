#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Jul 04, 2022 09:06:55 PM +03  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import Renamer_support

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("750x700+510+180")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1,  1)
        top.title(".: Renamer :.")
        top.configure(highlightcolor="black")

        self.top = top
        self.combobox = tk.StringVar()

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.52, rely=0.017, relheight=0.714
                , relwidth=0.468)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''Yeni İsim Önizleme Ekranı''')

        self.onizle_text = ScrolledText(self.Labelframe1)
        self.onizle_text.place(relx=0.04, rely=0.064, relheight=0.914
                , relwidth=0.917, bordermode='ignore')
        self.onizle_text.configure(background="white")
        self.onizle_text.configure(font="TkTextFont")
        self.onizle_text.configure(insertborderwidth="3")
        self.onizle_text.configure(selectbackground="blue")
        self.onizle_text.configure(selectforeground="white")
        self.onizle_text.configure(wrap="none")

        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(relx=0.013, rely=0.017, relheight=0.714
                , relwidth=0.467)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(text='''İsimlendirilecek Dosyaları Seçin''')

        self.Label1 = tk.Label(self.Labelframe2)
        self.Label1.place(relx=0.029, rely=0.04, height=44, width=151
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(text='''Dosya Seçin:''')

        self.TButton1 = ttk.Button(self.Labelframe2)
        self.TButton1.place(relx=0.429, rely=0.06, height=28, width=183
                , bordermode='ignore')
        self.TButton1.configure(command=Renamer_support.dosya_sec)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Seç...''')
        self.TButton1.configure(compound='left')

        self.girdi_text = ScrolledText(self.Labelframe2)
        self.girdi_text.place(relx=0.026, rely=0.12, relheight=0.844
                , relwidth=0.949, bordermode='ignore')
        self.girdi_text.configure(background="white")
        self.girdi_text.configure(font="TkTextFont")
        self.girdi_text.configure(insertborderwidth="3")
        self.girdi_text.configure(selectbackground="blue")
        self.girdi_text.configure(selectforeground="white")
        self.girdi_text.configure(wrap="none")

        self.secenek_listesi = ttk.Combobox(self.top)
        self.secenek_listesi.place(relx=0.027, rely=0.786, relheight=0.047
                , relwidth=0.44)
        self.secenek_listesi.configure(textvariable=self.combobox)
        self.secenek_listesi.configure(takefocus="")

        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.02, rely=0.743, height=28, width=178)
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(text='''Adlandırma Seçenekleri :''')

        self.onizle = tk.Button(self.top)
        self.onizle.place(relx=0.52, rely=0.757, height=65, width=345)
        self.onizle.configure(borderwidth="2")
        self.onizle.configure(command=Renamer_support.Onizle)
        self.onizle.configure(compound='left')
        self.onizle.configure(text='''Önizle''')

        self.yeni_isim = tk.Entry(self.top)
        self.yeni_isim.place(relx=0.027, rely=0.886, height=33, relwidth=0.44)
        self.yeni_isim.configure(background="white")
        self.yeni_isim.configure(font="TkFixedFont")
        self.yeni_isim.configure(state='disabled')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.027, rely=0.847, height=21, width=330)
        self.Label2.configure(anchor='w')
        self.Label2.configure(compound='left')
        self.Label2.configure(text='''Yeni İsim Belirtin:''')

        self.onizle_1 = tk.Button(self.top)
        self.onizle_1.place(relx=0.52, rely=0.849, height=65, width=345)
        self.onizle_1.configure(activebackground="#f9f9f9")
        self.onizle_1.configure(borderwidth="2")
        self.onizle_1.configure(command=Renamer_support.Uygula)
        self.onizle_1.configure(compound='left')
        self.onizle_1.configure(text='''Uygula''')

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    Renamer_support.main()


if __name__ == '__main__':
    Renamer_support.main()
