#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Jul 25, 2022 10:05:07 PM +03  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import Renamer1_2_support

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("750x700+500+200")
        top.minsize(1, 1)
        top.maxsize(1905, 1050)
        top.resizable(1,  1)
        top.title(".: Renamer :.")
        top.configure(highlightcolor="black")

        self.top = top
        self.SiraliArtir = tk.IntVar()
        self.OnEk = tk.IntVar()
        self.SonEk = tk.IntVar()
        self.KarakterSil = tk.IntVar()
        self.Degistir = tk.IntVar()
        self.KucukHarf = tk.IntVar()
        self.BuyukHarf = tk.IntVar()
        self.BasHarflerBuyuk = tk.IntVar()
        self.HarfleriTersCevir = tk.IntVar()
        self.ismiTersCevir = tk.IntVar()

        self.Labelframe1 = tk.LabelFrame(self.top)
        self.Labelframe1.place(relx=0.52, rely=0.017, relheight=0.571
                , relwidth=0.468)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(text='''Yeni İsim Önizleme Ekranı''')

        self.onizle_text = ScrolledText(self.Labelframe1)
        self.onizle_text.place(relx=0.028, rely=0.05, relheight=0.915
                , relwidth=0.917, bordermode='ignore')
        self.onizle_text.configure(background="white")
        self.onizle_text.configure(font="TkTextFont")
        self.onizle_text.configure(insertborderwidth="3")
        self.onizle_text.configure(selectbackground="blue")
        self.onizle_text.configure(selectforeground="white")
        self.onizle_text.configure(wrap="none")

        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(relx=0.013, rely=0.014, relheight=0.571
                , relwidth=0.467)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(text='''İsimlendirilecek Dosyaları Seçin''')

        self.Label1 = tk.Label(self.Labelframe2)
        self.Label1.place(relx=0.029, rely=0.05, height=35, width=151
                , bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(text='''Dosya Seçin:''')

        self.TButton1 = ttk.Button(self.Labelframe2)
        self.TButton1.place(relx=0.429, rely=0.063, height=28, width=183
                , bordermode='ignore')
        self.TButton1.configure(command=Renamer1_2_support.dosya_sec)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Seç...''')
        self.TButton1.configure(compound='left')

        self.girdi_text = ScrolledText(self.Labelframe2)
        self.girdi_text.place(relx=0.029, rely=0.15, relheight=0.825
                , relwidth=0.949, bordermode='ignore')
        self.girdi_text.configure(background="white")
        self.girdi_text.configure(font="TkTextFont")
        self.girdi_text.configure(insertborderwidth="3")
        self.girdi_text.configure(selectbackground="blue")
        self.girdi_text.configure(selectforeground="white")
        self.girdi_text.configure(wrap="none")

        self.onizle = tk.Button(self.top)
        self.onizle.place(relx=0.52, rely=0.886, height=65, width=165)
        self.onizle.configure(activebackground="#f9f9f9")
        self.onizle.configure(borderwidth="2")
        self.onizle.configure(command=Renamer1_2_support.Onizle)
        self.onizle.configure(compound='left')
        self.onizle.configure(text='''Önizle''')

        self.yeni_isim = tk.Entry(self.top)
        self.yeni_isim.place(relx=0.253, rely=0.871, height=33, relwidth=0.227)
        self.yeni_isim.configure(background="white")
        self.yeni_isim.configure(font="TkFixedFont")
        self.yeni_isim.configure(selectbackground="blue")
        self.yeni_isim.configure(selectforeground="white")
        self.yeni_isim.configure(state='disabled')

        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.027, rely=0.879, height=21, width=153)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(compound='left')
        self.Label2.configure(text='''Değiştirilecek Değer :''')

        self.uygula = tk.Button(self.top)
        self.uygula.place(relx=0.76, rely=0.886, height=65, width=165)
        self.uygula.configure(activebackground="#f9f9f9")
        self.uygula.configure(borderwidth="2")
        self.uygula.configure(command=Renamer1_2_support.Uygula)
        self.uygula.configure(compound='left')
        self.uygula.configure(state='active')
        self.uygula.configure(text='''Uygula''')

        self.yeni_isim_1 = tk.Entry(self.top)
        self.yeni_isim_1.place(relx=0.173, rely=0.607, height=33, relwidth=0.307)

        self.yeni_isim_1.configure(background="white")
        self.yeni_isim_1.configure(font="TkFixedFont")
        self.yeni_isim_1.configure(selectbackground="blue")
        self.yeni_isim_1.configure(selectforeground="white")
        self.yeni_isim_1.configure(state='disabled')

        self.yeni_isim_1_1 = tk.Entry(self.top)
        self.yeni_isim_1_1.place(relx=0.173, rely=0.664, height=33
                , relwidth=0.307)
        self.yeni_isim_1_1.configure(background="white")
        self.yeni_isim_1_1.configure(font="TkFixedFont")
        self.yeni_isim_1_1.configure(selectbackground="blue")
        self.yeni_isim_1_1.configure(selectforeground="white")
        self.yeni_isim_1_1.configure(state='disabled')

        self.Label1_1_1 = tk.Label(self.top)
        self.Label1_1_1.place(relx=0.16, rely=0.729, height=23, width=128)
        self.Label1_1_1.configure(activebackground="#f9f9f9")
        self.Label1_1_1.configure(anchor='w')
        self.Label1_1_1.configure(compound='left')
        self.Label1_1_1.configure(text='''Başlangıç Değeri:''')

        self.Checkbutton1 = tk.Checkbutton(self.top)
        self.Checkbutton1.place(relx=0.013, rely=0.729, relheight=0.033
                , relwidth=0.143)
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''Sıralı Artar''')
        self.Checkbutton1.configure(variable=self.SiraliArtir)

        self.yeni_isim_1_1_1 = tk.Entry(self.top)
        self.yeni_isim_1_1_1.place(relx=0.333, rely=0.721, height=33
                , relwidth=0.147)
        self.yeni_isim_1_1_1.configure(background="white")
        self.yeni_isim_1_1_1.configure(font="TkFixedFont")
        self.yeni_isim_1_1_1.configure(selectbackground="blue")
        self.yeni_isim_1_1_1.configure(selectforeground="white")
        self.yeni_isim_1_1_1.configure(state='disabled')

        self.OnEnEkle = tk.Checkbutton(self.top)
        self.OnEnEkle.place(relx=0.013, rely=0.614, relheight=0.033
                , relwidth=0.143)
        self.OnEnEkle.configure(activebackground="#f9f9f9")
        self.OnEnEkle.configure(anchor='w')
        self.OnEnEkle.configure(compound='left')
        self.OnEnEkle.configure(justify='left')
        self.OnEnEkle.configure(text='''Ön Ek Ekle :''')
        self.OnEnEkle.configure(variable=self.OnEk)

        self.SonEkEkle = tk.Checkbutton(self.top)
        self.SonEkEkle.place(relx=0.013, rely=0.671, relheight=0.033
                , relwidth=0.156)
        self.SonEkEkle.configure(activebackground="#f9f9f9")
        self.SonEkEkle.configure(anchor='w')
        self.SonEkEkle.configure(compound='left')
        self.SonEkEkle.configure(justify='left')
        self.SonEkEkle.configure(text='''Son Ek Ekle :''')
        self.SonEkEkle.configure(variable=self.SonEk)

        self.Checkbutton1_2 = tk.Checkbutton(self.top)
        self.Checkbutton1_2.place(relx=0.013, rely=0.786, relheight=0.033
                , relwidth=0.236)
        self.Checkbutton1_2.configure(activebackground="#f9f9f9")
        self.Checkbutton1_2.configure(anchor='w')
        self.Checkbutton1_2.configure(compound='left')
        self.Checkbutton1_2.configure(justify='left')
        self.Checkbutton1_2.configure(text='''Karakter / Kelime Sil :''')
        self.Checkbutton1_2.configure(variable=self.KarakterSil)

        self.yeni_isim_1_1_1_1 = tk.Entry(self.top)
        self.yeni_isim_1_1_1_1.place(relx=0.253, rely=0.779, height=33
                , relwidth=0.227)
        self.yeni_isim_1_1_1_1.configure(background="white")
        self.yeni_isim_1_1_1_1.configure(font="TkFixedFont")
        self.yeni_isim_1_1_1_1.configure(selectbackground="blue")
        self.yeni_isim_1_1_1_1.configure(selectforeground="white")
        self.yeni_isim_1_1_1_1.configure(state='disabled')

        self.Checkbutton1_2_1 = tk.Checkbutton(self.top)
        self.Checkbutton1_2_1.place(relx=0.013, rely=0.836, relheight=0.033
                , relwidth=0.236)
        self.Checkbutton1_2_1.configure(activebackground="#f9f9f9")
        self.Checkbutton1_2_1.configure(anchor='w')
        self.Checkbutton1_2_1.configure(compound='left')
        self.Checkbutton1_2_1.configure(justify='left')
        self.Checkbutton1_2_1.configure(text='''Değiştir / Yerine Koy''')
        self.Checkbutton1_2_1.configure(variable=self.Degistir)

        self.Label2_1 = tk.Label(self.top)
        self.Label2_1.place(relx=0.027, rely=0.936, height=21, width=174)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(anchor='w')
        self.Label2_1.configure(compound='left')
        self.Label2_1.configure(text='''Yerine Koyulacak Değer :''')

        self.yeni_isim_2 = tk.Entry(self.top)
        self.yeni_isim_2.place(relx=0.253, rely=0.929, height=33, relwidth=0.227)

        self.yeni_isim_2.configure(background="white")
        self.yeni_isim_2.configure(font="TkFixedFont")
        self.yeni_isim_2.configure(selectbackground="blue")
        self.yeni_isim_2.configure(selectforeground="white")
        self.yeni_isim_2.configure(state='disabled')

        self.Radiobutton1 = tk.Radiobutton(self.top)
        self.Radiobutton1.place(relx=0.507, rely=0.607, relheight=0.033
                , relwidth=0.185)
        self.Radiobutton1.configure(anchor='w')
        self.Radiobutton1.configure(compound='left')
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''küçük harf''')
        self.Radiobutton1.configure(variable=self.KucukHarf)

        self.Radiobutton1_1 = tk.Radiobutton(self.top)
        self.Radiobutton1_1.place(relx=0.507, rely=0.664, relheight=0.033
                , relwidth=0.185)
        self.Radiobutton1_1.configure(activebackground="#f9f9f9")
        self.Radiobutton1_1.configure(anchor='w')
        self.Radiobutton1_1.configure(compound='left')
        self.Radiobutton1_1.configure(justify='left')
        self.Radiobutton1_1.configure(text='''BÜYÜK HARF''')
        self.Radiobutton1_1.configure(variable=self.BuyukHarf)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Radiobutton1_2 = tk.Radiobutton(self.top)
        self.Radiobutton1_2.place(relx=0.507, rely=0.721, relheight=0.033
                , relwidth=0.4)
        self.Radiobutton1_2.configure(activebackground="#f9f9f9")
        self.Radiobutton1_2.configure(anchor='w')
        self.Radiobutton1_2.configure(compound='left')
        self.Radiobutton1_2.configure(justify='left')
        self.Radiobutton1_2.configure(text='''Kelimelerin Baş Harfleri Büyük''')
        self.Radiobutton1_2.configure(variable=self.BasHarflerBuyuk)

        self.Radiobutton1_2_1 = tk.Radiobutton(self.top)
        self.Radiobutton1_2_1.place(relx=0.507, rely=0.779, relheight=0.033
                , relwidth=0.4)
        self.Radiobutton1_2_1.configure(activebackground="#f9f9f9")
        self.Radiobutton1_2_1.configure(anchor='w')
        self.Radiobutton1_2_1.configure(compound='left')
        self.Radiobutton1_2_1.configure(justify='left')
        self.Radiobutton1_2_1.configure(text='''hARFLERİ tERS çEVİR''')
        self.Radiobutton1_2_1.configure(variable=self.HarfleriTersCevir)

        self.Radiobutton1_2_1_1 = tk.Radiobutton(self.top)
        self.Radiobutton1_2_1_1.place(relx=0.507, rely=0.829, relheight=0.033
                , relwidth=0.4)
        self.Radiobutton1_2_1_1.configure(activebackground="#f9f9f9")
        self.Radiobutton1_2_1_1.configure(anchor='w')
        self.Radiobutton1_2_1_1.configure(compound='left')
        self.Radiobutton1_2_1_1.configure(justify='left')
        self.Radiobutton1_2_1_1.configure(text='''İsmi ters çevir ( riveç sret imsi )''')
        self.Radiobutton1_2_1_1.configure(variable=self.ismiTersCevir)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    Renamer1_2_support.main()

if __name__ == '__main__':
    Renamer1_2_support.main()




